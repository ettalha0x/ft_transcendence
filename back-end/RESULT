# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthtokenToken(models.Model):
    key = models.CharField(primary_key=True, max_length=40)
    created = models.DateTimeField()
    user = models.OneToOneField('UserUser', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'authtoken_token'


class ChatChatmessage(models.Model):
    id = models.BigAutoField(primary_key=True)
    message = models.TextField()
    timestamp = models.DateTimeField()
    receiver = models.ForeignKey('UserUser', models.DO_NOTHING)
    sender = models.ForeignKey('UserUser', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'chat_chatmessage'


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.SmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey('UserUser', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    id = models.BigAutoField(primary_key=True)
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class FriendsFriendlist(models.Model):
    id = models.BigAutoField(primary_key=True)
    are_friends = models.BooleanField()
    user1_blocked_user2 = models.BooleanField()
    user2_blocked_user1 = models.BooleanField()
    user1 = models.ForeignKey('UserUser', models.DO_NOTHING)
    user2 = models.ForeignKey('UserUser', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'friends_friendlist'


class GameMatch(models.Model):
    id = models.BigAutoField(primary_key=True)
    player1_score = models.IntegerField()
    player2_score = models.IntegerField()
    created_at = models.DateField()
    player1 = models.ForeignKey('UserUser', models.DO_NOTHING)
    player2 = models.ForeignKey('UserUser', models.DO_NOTHING)
    winner = models.ForeignKey('UserUser', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'game_match'


class NotificationNotification(models.Model):
    id = models.BigAutoField(primary_key=True)
    message = models.CharField(max_length=255)
    type = models.CharField(max_length=3)
    read = models.BooleanField()
    created_at = models.DateTimeField()
    receiver = models.ForeignKey('UserUser', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'notification_notification'


class TokenBlacklistBlacklistedtoken(models.Model):
    id = models.BigAutoField(primary_key=True)
    blacklisted_at = models.DateTimeField()
    token = models.OneToOneField('TokenBlacklistOutstandingtoken', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'token_blacklist_blacklistedtoken'


class TokenBlacklistOutstandingtoken(models.Model):
    id = models.BigAutoField(primary_key=True)
    token = models.TextField()
    created_at = models.DateTimeField(blank=True, null=True)
    expires_at = models.DateTimeField()
    user = models.ForeignKey('UserUser', models.DO_NOTHING, blank=True, null=True)
    jti = models.CharField(unique=True, max_length=255)

    class Meta:
        managed = False
        db_table = 'token_blacklist_outstandingtoken'


class UserStats(models.Model):
    id = models.BigAutoField(primary_key=True)
    matche_played = models.IntegerField()
    matche_won = models.IntegerField()
    matche_lost = models.IntegerField()
    matche_draw = models.IntegerField()
    goals_scored = models.IntegerField()
    goals_conceded = models.IntegerField()
    goals_difference = models.IntegerField()
    user = models.ForeignKey('UserUser', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'user_stats'


class UserUser(models.Model):
    id = models.BigAutoField(primary_key=True)
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    email = models.CharField(unique=True, max_length=60)
    username = models.CharField(unique=True, max_length=30)
    full_name = models.CharField(max_length=60)
    field_2fa_enabled = models.BooleanField(db_column='_2fa_enabled')  # Field renamed because it started with '_'.
    exp = models.IntegerField()
    level = models.IntegerField()
    profile_pic = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'user_user'
